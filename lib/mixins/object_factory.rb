module Rave
  module Mixins
    # Abstract object that allows you to create instances of the classes inside
    # it based on providing a type name.
    module ObjectFactory
      def self.included(base)
        base.class_eval do
          # Store the registered classes in a class instance variable.
          class << self
            attr_reader :class_to_type_mapping
          end

          @class_to_type_mapping = {}

          class_eval(<<-END, __FILE__, __LINE__)
            def self.classes_by_type
              ::#{self.name}.class_to_type_mapping
            end
          END

          # Object factory method.
          #
          # :type - Type of object to create [String]
          #
          # === Options
          # As appropriate to the generated classes (options passed to constructor).
          def self.create(type, *args, &block)
            raise ArgumentError.new("Unknown #{self} type #{type}") unless classes_by_type[type]

            classes_by_type[type].new(*args, &block)
          end

          # Is this type able to be created?
          def self.valid_type?(type)
            classes_by_type.has_key? type
          end

          # Register this class with its factory.
          def self.factory_register(type)
            classes_by_type[type] = self
            
            class << self
              def type; @type.dup; end
            end

            @type = type
          end

          # Classes that can be generated by the factory [Array of Class]
          def self.classes
            classes_by_type.values
          end

          # Types that can be generated by the factory [Array of String]
          def self.types
            classes_by_type.keys
          end
        end
      end

      # Type name for this class [String]
      attr_reader :type
      def type # :nodoc:
        self.class.type
      end
    end
  end
end
